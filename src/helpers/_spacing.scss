////
/// @group helpers
////

/// Responsive spacing
///
/// Adds responsive spacing (either padding or margin, depending on `$property`)
/// using a 'spacing map', which defines different spacing values at different
/// breakpoints.
///
/// @param {Map} $scale-map - Map of breakpoints and spacing values
/// @param {String} $property - Property to add spacing to (e.g. 'margin')
/// @param {String} $direction [all] - Direction to add spacing to
///   (`top`, `right`, `bottom`, `left`, `all`)
/// @param {Boolean} $important [false] - Whether to mark as `!important`
/// @param {Number} $adjustment [false] - Offset to adjust spacing by
///
/// @access public

@mixin govuk-responsive-spacing($scale-map, $property, $direction: "all", $important: false, $adjustment: false) {

  // Ensure that $scale-map is actually a map - it's really easy to accidentally
  // pass in a point from the non-responsive scale, in which case this mixin
  // would otherwise no-op silently.
  $actual-input-type: type-of($scale-map);
  @if $actual-input-type != "map" {
    @error "Expected a map of breakpoints from the responsive scale, but got a "
    + "#{$actual-input-type}. Make sure you are using a point from the "
    + "responsive spacing scale.";
  }

  // Loop through each breakpoint
  @each $breakpoint, $breakpoint-value in $scale-map {

    @if ($adjustment) {
      $breakpoint-value: $breakpoint-value + $adjustment;
    }

    // The 'null' breakpoint is for mobile.
    @if $breakpoint == null {

      @if $direction == all {
        #{$property}: $breakpoint-value iff($important, !important);
      } @else {
        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);
      }
    } @else {
      @include mq($from: $breakpoint) {
        @if $direction == all {
          #{$property}: $breakpoint-value iff($important, !important);
        } @else {
          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);
        }
      }
    }
  }
}

/// Responsive margin
///
/// Adds responsive margin using a 'spacing map', which defines different
/// spacing values at different breakpoints. Wrapper for the
/// `govuk-responsive-spacing` mixin.
///
/// @see {mixin} govuk-responsive-spacing
///
/// @param {Map} $scale-map - Map of breakpoints and spacing values
/// @param {String} $direction [all] - Direction to add spacing to
///   (`top`, `right`, `bottom`, `left`, `all`)
/// @param {Boolean} $important [false] - Whether to mark as `!important`
/// @param {Number} $adjustment [false] - Offset to adjust spacing by
///
/// @access public

@mixin govuk-responsive-margin($scale-map, $direction: "all", $important: false, $adjustment: false) {
  @include govuk-responsive-spacing($scale-map, "margin", $direction, $important, $adjustment);
}

/// Responsive padding
///
/// Adds responsive padding using a 'spacing map', which defines different
/// spacing values at different breakpoints. Wrapper for the
/// `govuk-responsive-spacing` mixin.
///
/// @see {mixin} govuk-responsive-spacing
///
/// @param {Map} $scale-map - Map of breakpoints and spacing values
/// @param {String} $direction [all] - Direction to add spacing to
///   (`top`, `right`, `bottom`, `left`, `all`)
/// @param {Boolean} $important [false] - Whether to mark as `!important`
/// @param {Number} $adjustment [false] - Offset to adjust spacing by
///
/// @access public

@mixin govuk-responsive-padding($scale-map, $direction: "all", $important: false, $adjustment: false) {
  @include govuk-responsive-spacing($scale-map, "padding", $direction, $important, $adjustment);
}
